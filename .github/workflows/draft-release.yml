# Copyright 2025 Naked Software, LLC
#
# License Agreement
#
# Version 1.0.0 (September 28, 2025)
#
# This Naked Time License Agreement ("Agreement") is a legal agreement between 
# you ("Licensee") and Naked Software, LLC ("Licensor") for the use of the 
# Naked Time software product ("Software"). By using the Software, you agree 
# to be bound by the terms of this Agreement.
#
# 1. Grant of License
#
# Licensor grants Licensee a non-exclusive, non-transferable, 
# non-sublicensable license to use the Software for non-commercial, 
# educational, or other non-production purposes. Licensee may not use the 
# Software for any commercial purposes without purchasing a commercial license
# from Licensor.
#
# 2. Commercial Use
#
# To use the Software for commercial purposes, Licensee must purchase a 
# commercial license from Licensor. A commercial license allows Licensee to 
# use the Software in production environments, build their own version, and 
# add custom features or bug fixes. Licensee may not sell the Software or any 
# derivative works to others.
#
# 3. Derivative Works
#
# Licensee may create derivative works of the Software for their own use, 
# provided that they maintain a valid commercial license. Licensee may not 
# sell or distribute derivative works to others. Any derivative works must 
# include a copy of this Agreement and retain all copyright notices.
#
# 4. Sharing and Contributions
#
# Licensee may share their changes or bug fixes to the Software with others, 
# provided that such changes are made freely available and not sold. Licensee 
# is encouraged to contribute their bug fixes back to Licensor for inclusion 
# in the Software.
#
# 5. Restrictions
#
# Licensee may not:
#
# - Use the Software for any commercial purposes without a valid commercial 
#   license.
# - Sell, sublicense, or distribute the Software or any derivative works.
# - Remove or alter any copyright notices or proprietary legends on the 
#   Software.
#
# 6. Termination
#
# This Agreement is effective until terminated. Licensor may terminate this 
# Agreement at any time if Licensee breaches any of its terms. Upon 
# termination, Licensee must cease all use of the Software and destroy all 
# copies in their possession.
#
# 7. Disclaimer of Warranty
#
# The Software is provided "as is" without warranty of any kind, express or 
# implied, including but not limited to the warranties of merchantability, 
# fitness for a particular purpose, and noninfringement. In no event shall 
# Licensor be liable for any claim, damages, or other liability, whether in 
# an action of contract, tort, or otherwise, arising from, out of, or in 
# connection with the Software or the use or other dealings in the Software.
#
# 8. Limitation of Liability
#
# In no event shall Licensor be liable for any indirect, incidental, special, 
# exemplary, or consequential damages (including, but not limited to, 
# procurement of substitute goods or services; loss of use, data, or profits; 
# or business interruption) however caused and on any theory of liability, 
# whether in contract, strict liability, or tort (including negligence or 
# otherwise) arising in any way out of the use of the Software, even if 
# advised of the possibility of such damage.
#
# 9. Governing Law
#
# This Agreement shall be governed by and construed in accordance with the 
# laws of the jurisdiction in which Licensor is located, without regard to its 
# conflict of law principles.
#
# 10. Entire Agreement
#
# This Agreement constitutes the entire agreement between the parties with 
# respect to the Software and supersedes all prior or contemporaneous 
# understandings regarding such subject matter.
#
# By using the Software, you acknowledge that you have read this Agreement, 
# understand it, and agree to be bound by its terms and conditions.

name: Draft Release

on:
  push:
    branches:
      - 'release/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.2.3)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: read

concurrency:
  group: draft-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      release_exists: ${{ steps.check_release.outputs.exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from branch or input
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.version }}"
          else
            # Extract version from release branch name (e.g., release/1.2.3)
            VERSION="${GITHUB_REF#refs/heads/release/}"
          fi
          
          # Validate version format (major.minor.patch)
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            echo "Expected format: major.minor.patch (e.g., 1.2.3)"
            exit 1
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Check if release exists
        id: check_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if gh release view "v${{ steps.get_version.outputs.version }}" &>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.get_version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.get_version.outputs.version }} does not exist"
          fi

  build-linux:
    name: Build Linux (${{ matrix.platform_name }})
    needs: prepare
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            platform_name: "x64"
            artifact_suffix: "linux-x64"
            runner: ubuntu-24.04
          - arch: arm64
            platform_name: "ARM64"
            artifact_suffix: "linux-arm64"
            runner: ubuntu-24.04-arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          lfs: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          # Try to install the time64 package first, fall back to the standard package
          sudo apt-get install -y libasound2t64-dev || sudo apt-get install -y libasound2-dev

      - name: Build for Linux ${{ matrix.platform_name }}
        env:
          GOOS: linux
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
        run: |
          mkdir -p dist
          go build -ldflags="-s -w -X main.version=${{ needs.prepare.outputs.version }}" \
            -o dist/time ./cmd/time

      - name: Create archive
        run: |
          cd dist
          chmod +x time
          tar -czf time-${{ needs.prepare.outputs.version }}-${{ matrix.artifact_suffix }}.tar.gz time
          sha256sum time-${{ needs.prepare.outputs.version }}-${{ matrix.artifact_suffix }}.tar.gz > \
            time-${{ needs.prepare.outputs.version }}-${{ matrix.artifact_suffix }}.tar.gz.sha256

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: time-${{ matrix.artifact_suffix }}
          path: |
            dist/time-${{ needs.prepare.outputs.version }}-${{ matrix.artifact_suffix }}.tar.gz
            dist/time-${{ needs.prepare.outputs.version }}-${{ matrix.artifact_suffix }}.tar.gz.sha256
          retention-days: 7
          if-no-files-found: error

  build-macos:
    name: Build macOS (${{ matrix.platform_name }})
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            arch: amd64
            platform_name: "Intel"
            artifact_suffix: "macos-x64"
          - os: macos-14
            arch: arm64
            platform_name: "Apple Silicon"
            artifact_suffix: "macos-arm64"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          lfs: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Build for macOS ${{ matrix.platform_name }}
        env:
          GOOS: darwin
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
        run: |
          mkdir -p dist
          go build -ldflags="-s -w -X main.version=${{ needs.prepare.outputs.version }}" \
            -o dist/time ./cmd/time

      - name: Create archive
        run: |
          cd dist
          chmod +x time
          tar -czf time-${{ needs.prepare.outputs.version }}-${{ matrix.artifact_suffix }}.tar.gz time
          shasum -a 256 time-${{ needs.prepare.outputs.version }}-${{ matrix.artifact_suffix }}.tar.gz > \
            time-${{ needs.prepare.outputs.version }}-${{ matrix.artifact_suffix }}.tar.gz.sha256

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: time-${{ matrix.artifact_suffix }}
          path: |
            dist/time-${{ needs.prepare.outputs.version }}-${{ matrix.artifact_suffix }}.tar.gz
            dist/time-${{ needs.prepare.outputs.version }}-${{ matrix.artifact_suffix }}.tar.gz.sha256
          retention-days: 7
          if-no-files-found: error

  build-windows:
    name: Build Windows (${{ matrix.platform_name }})
    needs: prepare
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            platform_name: "x64"
            artifact_suffix: "windows-x64"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          lfs: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Build for Windows ${{ matrix.platform_name }}
        env:
          GOOS: windows
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
        run: |
          mkdir -p dist
          go build -ldflags="-s -w -X main.version=${{ needs.prepare.outputs.version }}" `
            -o dist/time.exe ./cmd/time

      - name: Create archive
        run: |
          cd dist
          Compress-Archive -Path time.exe -DestinationPath time-${{ needs.prepare.outputs.version }}-${{ matrix.artifact_suffix }}.zip
          Get-FileHash -Algorithm SHA256 time-${{ needs.prepare.outputs.version }}-${{ matrix.artifact_suffix }}.zip | `
            Select-Object -ExpandProperty Hash | `
            Out-File -FilePath time-${{ needs.prepare.outputs.version }}-${{ matrix.artifact_suffix }}.zip.sha256 -Encoding ASCII

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: time-${{ matrix.artifact_suffix }}
          path: |
            dist/time-${{ needs.prepare.outputs.version }}-${{ matrix.artifact_suffix }}.zip
            dist/time-${{ needs.prepare.outputs.version }}-${{ matrix.artifact_suffix }}.zip.sha256
          retention-days: 7
          if-no-files-found: error

  create-release:
    name: Create/Update Draft Release
    needs: [prepare, build-linux, build-macos, build-windows]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check build status
        id: build_status
        run: |
          BUILD_LINUX="${{ needs.build-linux.result }}"
          BUILD_MACOS="${{ needs.build-macos.result }}"
          BUILD_WINDOWS="${{ needs.build-windows.result }}"
          
          echo "Build Linux: ${BUILD_LINUX}"
          echo "Build macOS: ${BUILD_MACOS}"
          echo "Build Windows: ${BUILD_WINDOWS}"
          
          if [[ "${BUILD_LINUX}" == "success" && "${BUILD_MACOS}" == "success" && "${BUILD_WINDOWS}" == "success" ]]; then
            echo "all_success=true" >> $GITHUB_OUTPUT
            echo "✅ All builds succeeded"
          else
            echo "all_success=false" >> $GITHUB_OUTPUT
            echo "⚠️ Some builds failed, but continuing with available artifacts"
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
        continue-on-error: true

      - name: Display downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          ls -lR artifacts/ || echo "No artifacts directory found"

      - name: Create or update draft release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          TAG="v${VERSION}"
          
          # Check if we have any artifacts
          if [ -d "artifacts" ] && [ "$(ls -A artifacts 2>/dev/null)" ]; then
            ARTIFACT_COUNT=$(ls -1 artifacts | wc -l)
            echo "Found ${ARTIFACT_COUNT} artifact(s)"
          else
            echo "::error::No artifacts found. All builds may have failed."
            exit 1
          fi
          
          if [ "${{ needs.prepare.outputs.release_exists }}" = "true" ]; then
            echo "Updating existing draft release ${TAG}"
            
            # Delete existing assets
            gh release view "${TAG}" --json assets --jq '.assets[].name' | while read -r asset; do
              echo "Deleting existing asset: ${asset}"
              gh release delete-asset "${TAG}" "${asset}" --yes || true
            done
            
            # Upload new assets
            gh release upload "${TAG}" artifacts/* --clobber
            
            # Generate new release notes
            NOTES=$(gh api repos/:owner/:repo/releases/generate-notes \
              -f tag_name="${TAG}" \
              -f target_commitish="${GITHUB_REF#refs/heads/}" \
              --jq .body)
            
            # Update release with new notes
            gh release edit "${TAG}" \
              --draft \
              --notes "$NOTES" \
              --latest
          else
            echo "Creating new draft release ${TAG}"
            
            # Create draft release with auto-generated notes
            gh release create "${TAG}" \
              --draft \
              --title "Naked Time ${VERSION}" \
              --generate-notes \
              --latest \
              artifacts/*
          fi
          
          # Add warning if not all builds succeeded
          if [ "${{ steps.build_status.outputs.all_success }}" != "true" ]; then
            echo "::warning::Some platform builds failed. The release is incomplete."
          fi

      - name: Output release information
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          TAG="v${VERSION}"
          RELEASE_URL=$(gh release view "${TAG}" --json url --jq '.url')
          
          if [ "${{ steps.build_status.outputs.all_success }}" = "true" ]; then
            echo "::notice title=Draft Release Created/Updated::Release ${TAG} is ready for review at ${RELEASE_URL}"
          else
            echo "::warning title=Draft Release Partially Created::Release ${TAG} created with available artifacts at ${RELEASE_URL}. Some platform builds failed."
          fi
          
          echo "Draft Release URL: ${RELEASE_URL}"
          echo ""
          echo "Build Results:"
          echo "- Linux: ${{ needs.build-linux.result }}"
          echo "- macOS: ${{ needs.build-macos.result }}"
          echo "- Windows: ${{ needs.build-windows.result }}"
