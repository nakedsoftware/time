name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: nakedsoftware/time

jobs:
  build-binaries:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25.1'
        cache: true
        cache-dependency-path: go.sum

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev
        # Install cross-compilation toolchain for arm64 if needed
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
          # Add arm64 architecture and install arm64 libraries
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y libasound2-dev:arm64
        fi

    - name: Build Go binary for linux/${{ matrix.arch }}
      env:
        GOOS: linux
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 1
        CC: ${{ matrix.arch == 'arm64' && 'aarch64-linux-gnu-gcc' || 'gcc' }}
      run: |
        mkdir -p out
        go build -o out/time-${{ matrix.arch }} ./cmd/time

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.arch }}
        path: out/time-${{ matrix.arch }}
        retention-days: 1

  build-docker:
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all binary artifacts
      uses: actions/download-artifact@v4
      with:
        path: out
        pattern: binary-*
        merge-multiple: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') }}
          type=raw,value=dev,enable={{is_default_branch}}

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Comment on PR with container image info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const tags = `${{ steps.meta.outputs.tags }}`.split('\n').filter(tag => tag.trim() !== '');
          const prTag = tags.find(tag => tag.includes('pr-${{ github.event.number }}'));
          
          if (prTag) {
            const comment = `## 🐳 Container Image Built
            
            Your PR container image has been built and published:
            
            \`\`\`
            ${prTag}
            \`\`\`
            
            **Supported architectures:** linux/amd64, linux/arm64
            
            **Usage:**
            \`\`\`bash
            docker run --rm ${prTag} --help
            \`\`\`
            
            > 🗑️ This image will be automatically deleted when the PR is closed.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }