name: Build macOS (ARM64)

on:
  repository_dispatch:
    types: [build-macos-command]

jobs:
  build:
    if: github.event.client_payload.slash_command.command == 'build-macos'
    runs-on: macos-latest
    
    steps:
    - name: Add reaction
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
        reactions: eyes
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
        ref: ${{ github.event.client_payload.pull_request.head.ref }}
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
    
    - name: Get version info
      id: version
      run: |
        # Get the short commit SHA
        SHORT_SHA=$(echo ${{ github.event.client_payload.pull_request.head.sha }} | cut -c1-7)
        # Get the PR number
        PR_NUMBER=${{ github.event.client_payload.pull_request.number }}
        # Create version string
        VERSION="pr-${PR_NUMBER}-${SHORT_SHA}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
    
    - name: Build for macOS ARM64
      env:
        GOOS: darwin
        GOARCH: arm64
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        go build -ldflags="-s -w" -o dist/time-macos-arm64 ./cmd/time
        
        # Verify the binary was built correctly
        file dist/time-macos-arm64
        ls -la dist/

    - name: Create entitlements file
      run: |
        cat > dist/entitlements.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.cs.allow-jit</key>
            <true/>
            <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
            <true/>
            <key>com.apple.security.cs.disable-library-validation</key>
            <true/>
            <key>com.apple.security.device.audio-output</key>
            <true/>
            <key>com.apple.security.files.user-selected.read-write</key>
            <true/>
            <key>com.apple.security.network.client</key>
            <true/>
        </dict>
        </plist>
        EOF

    - name: Import Apple certificates
      env:
        APPLE_CERTIFICATE: ${{ secrets.APPLE_DEVELOPER_ID_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DEVELOPER_ID_CERTIFICATE_PASSWORD }}
      run: |
        # Create temporary keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
        
        # Create and unlock keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        
        # Import certificate
        echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
        security import certificate.p12 -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
        security list-keychain -d user -s "$KEYCHAIN_PATH"
        
        # Clean up certificate file
        rm certificate.p12

    - name: Sign binary
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # Sign the binary
        codesign --force --verify --verbose --sign "Developer ID Application: Naked Software ($APPLE_TEAM_ID)" \
          --entitlements dist/entitlements.plist \
          --identifier "software.naked.time" \
          --timestamp \
          --options runtime \
          dist/time-macos-arm64
        
        # Verify the signature
        codesign --verify --verbose=2 dist/time-macos-arm64
        spctl --assess --verbose=2 dist/time-macos-arm64

    - name: Notarize binary
      env:
        APPLE_NOTARIZATION_APPLE_ID: ${{ secrets.APPLE_NOTARIZATION_APPLE_ID }}
        APPLE_NOTARIZATION_APP_PASSWORD: ${{ secrets.APPLE_NOTARIZATION_APP_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # Create a zip file for notarization
        cd dist
        zip time-macos-arm64-notarize.zip time-macos-arm64
        
        # Submit for notarization
        echo "Submitting for notarization..."
        xcrun notarytool submit time-macos-arm64-notarize.zip \
          --apple-id "$APPLE_NOTARIZATION_APPLE_ID" \
          --password "$APPLE_NOTARIZATION_APP_PASSWORD" \
          --team-id "$APPLE_TEAM_ID" \
          --wait
        
        # Staple the notarization (for zip files, we staple the binary)
        echo "Stapling notarization..."
        xcrun stapler staple time-macos-arm64
        
        # Verify notarization
        echo "Verifying notarization..."
        spctl --assess --verbose=2 time-macos-arm64
        
        # Clean up notarization zip
        rm time-macos-arm64-notarize.zip
    
    - name: Create archive
      run: |
        cd dist
        tar -czf time-macos-arm64-${{ steps.version.outputs.version }}.tar.gz time-macos-arm64
        ls -la
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: time-macos-arm64-${{ steps.version.outputs.version }}
        path: dist/time-macos-arm64-${{ steps.version.outputs.version }}.tar.gz
        retention-days: 30
    
    - name: Comment PR with download link
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.client_payload.pull_request.number }}
        body: |
          ## ‚úÖ macOS ARM64 Build Complete
          
          **Build Details:**
          - **Version:** `${{ steps.version.outputs.version }}`
          - **Commit:** `${{ steps.version.outputs.short_sha }}`
          - **Architecture:** macOS ARM64 (Apple Silicon)
          
          **Download:** 
          üçé [time-macos-arm64-${{ steps.version.outputs.version }}.tar.gz](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          > **Note:** Click the link above, then scroll down to the "Artifacts" section to download the build.
          
          **Usage after download:**
          ```bash
          tar -xzf time-macos-arm64-${{ steps.version.outputs.version }}.tar.gz
          ./time-macos-arm64 --help
          ```
          
          ---
          *Build triggered by `/build-macos` command*
    
    - name: Add success reaction
      if: success()
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
        reactions: rocket
    
    - name: Add failure reaction
      if: failure()
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
        reactions: confused
    
    - name: Comment on build failure
      if: failure()
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.client_payload.pull_request.number }}
        body: |
          ## ‚ùå macOS ARM64 Build Failed
          
          The build failed for commit `${{ steps.version.outputs.short_sha }}`. 
          Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
          
          ---
          *Build triggered by `/build-macos` command*